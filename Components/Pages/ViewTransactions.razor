@page "/weather"
@using TransactionTracker.Model
@inject ITransactionService TransactionService
@inject NavigationManager NavigationManager

<Layout>
    <div class="transaction-list-container">
        <!-- Header with Clear Debt button -->
        <!-- Filters -->
        <div class="filters">
            <div>
                <label for="FilterType">Transaction Type:</label>
                <select id="FilterType" @bind="filterTransactionType">
                    <option value="">All</option>
                    <option value="Debt">Debt</option>
                    <option value="Debit">Debit</option>
                    <option value="Credit">Credit</option>
                </select>
            </div>
            <div>
                <label for="FilterDate">Transaction Date:</label>
                <input id="FilterDate" type="date" @bind="filterDate" />
            </div>

            <!-- Apply Filter Button -->
            <div class="filter-action">
                <button class="btn btn-primary" @onclick="ApplyFilters">Apply Filter</button>
            </div>
        </div>

        <!-- Transaction List -->
        @if (filteredTransactions == null)
        {
            <p>Loading...</p>
        }
        else if (filteredTransactions.Any())
        {
            <div class="transaction-box">
                <table>
                    <thead>
                        <tr>
                            <th>Transaction Type</th>
                            <th>Amount</th>
                            <th>Transaction Date</th>
                            <th>Notes</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in filteredTransactions)
                        {
                            <tr>
                                <td>@transaction.TransactionType</td>
                                <td>@transaction.Amount</td>
                                <td>@transaction.TransactionDate.ToShortDateString()</td>
                                <td>@transaction.Notes</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" @onclick="() => OpenEditModal(transaction)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteModal(transaction)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p>No transactions found.</p>
        }
    </div>

    <!-- Edit Transaction Modal -->
    @if (isEditModalVisible)
    {
        <div class="modal-overlay" @onclick="CloseEditModal"></div>
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Transaction</h5>
                    <button type="button" class="close" @onclick="CloseEditModal">&times;</button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editTransaction" OnValidSubmit="HandleEditSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label for="TransactionType">Transaction Type</label>
                            <select id="TransactionType" class="form-control" @bind="editTransaction.TransactionType">
                                <option value="Debt">Debt</option>
                                <option value="Debit">Debit</option>
                                <option value="Credit">Credit</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="Amount">Amount</label>
                            <InputNumber id="Amount" class="form-control" @bind-Value="editTransaction.Amount" />
                        </div>

                        <div class="form-group">
                            <label for="Notes">Notes</label>
                            <InputText id="Notes" class="form-control" @bind-Value="editTransaction.Notes" />
                        </div>

                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </EditForm>
                </div>
            </div>
        </div>
    }

    <!-- Delete Transaction Modal -->
    @if (isDeleteModalVisible)
    {
        <div class="modal-overlay" @onclick="CloseDeleteModal"></div>
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Transaction</h5>
                    <button type="button" class="close" @onclick="CloseDeleteModal">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this transaction?</p>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                        <button class="btn btn-danger" @onclick="() => HandleDelete(deleteTransaction)">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    }
</Layout>

<style>
    .transaction-list-container {
        padding: 20px;
        margin: 10px;
        background-color: #f4f6f9;
        border-radius: 8px;
    }

    .filters {
        margin-bottom: 1rem;
        display: flex;
        gap: 1rem;
        align-items: center;
        background-color: #fff;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
    }

    .filters label {
        font-size: 1rem;
        color: #333;
    }

    .filters select,
    .filters input {
        padding: 10px;
        font-size: 1rem;
        border-radius: 4px;
        border: 1px solid #ccc;
        width: 180px;
    }

    .filter-action {
        display: flex;
        justify-content: flex-end;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 8px 20px;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .transaction-box {
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 8px;
        background-color: #fff;
        box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);
        margin-top: 1rem;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    table th,
    table td {
        padding: 10px;
        border: 1px solid #ddd;
        text-align: left;
    }

    table th {
        background-color: #f2f2f2;
    }

    /* Modal Styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        backdrop-filter: blur(5px); /* Apply blur to the background */
    }

    .modal-dialog {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        max-width: 500px;
        width: 100%;
        z-index: 1001; /* Ensure modal appears above the background overlay */
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-body {
        margin-top: 10px;
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    .modal-footer button {
        margin-top: 10px;
    }
</style>

@code {
    private List<Transaction> transactions;
    private List<Transaction> filteredTransactions;
    private bool isEditModalVisible = false;
    private Transaction editTransaction;
    private DateTime? filterDate;
    private string filterTransactionType = string.Empty;

    private bool isDeleteModalVisible = false;
    private Transaction deleteTransaction;

    protected override async Task OnInitializedAsync()
    {
        transactions = await TransactionService.GetAllTransactionsAsync();
        filteredTransactions = transactions.OrderByDescending(t => t.TransactionDate).ToList();  // Sort by date descending
    }

    private void ApplyFilters()
    {
        filteredTransactions = transactions.Where(t =>
            (string.IsNullOrWhiteSpace(filterTransactionType) || t.TransactionType == filterTransactionType) &&
            (!filterDate.HasValue || t.TransactionDate.Date == filterDate.Value.Date))
            .OrderByDescending(t => t.TransactionDate)
            .ToList();
    }

    private void OpenEditModal(Transaction transaction)
    {
        editTransaction = new Transaction
        {
            TransactionType = transaction.TransactionType,
            Amount = transaction.Amount,
            Notes = transaction.Notes,
        };
        isEditModalVisible = true;
    }

    private void CloseEditModal()
    {
        isEditModalVisible = false;
    }

    private async Task HandleEditSubmit()
    {
        await TransactionService.UpdateTransactionAsync(editTransaction);  // Update the transaction
        CloseEditModal();  // Close the edit modal

        // Refresh the transaction list after the update
        await RefreshTransactions();
    }

    private async Task RefreshTransactions()
    {
        transactions = await TransactionService.GetAllTransactionsAsync();  // Fetch updated transactions
        filteredTransactions = transactions.OrderByDescending(t => t.TransactionDate).ToList();  // Re-sort by date descending
    }

    private void OpenDeleteModal(Transaction transaction)
    {
        deleteTransaction = transaction;
        isDeleteModalVisible = true;
    }

    private void CloseDeleteModal()
    {
        isDeleteModalVisible = false;
    }

    private async Task HandleDelete(Transaction transaction)
    {
        await TransactionService.DeleteTransactionAsync(transaction.TransactionId);  // Delete the transaction
        CloseDeleteModal();  // Close the delete modal

        // Refresh the transaction list after deletion
        await RefreshTransactions();
    }
}
