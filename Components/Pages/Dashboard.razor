@page "/dashboard"
@using TransactionTracker.Model
@inject ITransactionService TransactionService

<style>
    .dashboard-container {
        margin: 30px;
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .filter-container {
        display: flex;
        justify-content: flex-start;
        align-items: center;
        gap: 10px;
    }

    .statistics-box, .transactions-box {
        display: flex;
        flex-direction: row;
        gap: 20px;
        flex-wrap: wrap;
    }

    .box {
        flex: 1;
        min-width: 300px;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .box-header {
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .box-content {
        font-size: 16px;
        line-height: 1.6;
    }

    .transaction-container {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .transaction-card {
        background-color: #ffffff;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .transaction-card p {
            margin: 0;
        }

    .text-success {
        color: #28a745;
    }

    .text-danger {
        color: #dc3545;
    }

    .text-warning {
        color: #ffc107;
    }
</style>

<div class="dashboard-container">
    <!-- Date Range Filter -->
    <div class="filter-container">
        <label for="startDate">Start Date:</label>
        <input type="date" id="startDate" @bind="startDate" />

        <label for="endDate">End Date:</label>
        <input type="date" id="endDate" @bind="endDate" />

        <button @onclick="ApplyFilters">Apply Filters</button>
    </div>

    <!-- Statistics and Pending Debts -->
    <div class="statistics-box">
        <!-- Statistics Box -->
        <div class="box">
            <div class="box-header">Statistics</div>
            <div class="box-content">
                <p>Total Cash Inflows: <strong>@totalCashInflows</strong></p>
                <p>Total Cash Outflows: <strong>@totalCashOutflows</strong></p>
                <p>Total Debts: <strong>@totalDebts</strong></p>
                <p>Cleared Debts: <strong>@clearedDebts</strong></p>
                <p>Remaining Debts: <strong>@remainingDebts</strong></p>
            </div>
        </div>

        <!-- Pending Debts Box -->
        <div class="box">
            <div class="box-header">Pending Debts</div>
            <div class="transaction-container">
                @if (pendingDebts.Any())
                {
                    @foreach (var debt in pendingDebts)
                    {
                        <div class="transaction-card">
                            <p><strong>Debt: </strong>@debt.Amount</p>
                            <p><strong>Due Date:</strong> @debt.TransactionDate.ToString("yyyy-MM-dd")</p>
                        </div>
                    }
                }
                else
                {
                    <p>No pending debts found.</p>
                }
            </div>
        </div>
    </div>

    <!-- Top Transactions -->
    <div class="transactions-box">
        <div class="box">
            <div class="box-header">Top 5 Highest Transactions</div>
            <div class="transaction-container">
                @foreach (var transaction in transactions.OrderByDescending(t => t.Amount).Take(5))
                {
                    <div class="transaction-card">
                        <p><strong>@transaction.TransactionType</strong></p>
                        <p>@transaction.TransactionDate.ToString("yyyy-MM-dd")</p>
                        <p>Amount: @transaction.Amount</p>
                    </div>
                }
            </div>
        </div>

        <div class="box">
            <div class="box-header">Top 5 Lowest Transactions</div>
            <div class="transaction-container">
                @foreach (var transaction in transactions.OrderBy(t => t.Amount).Take(5))
                {
                    <div class="transaction-card">
                        <p><strong>@transaction.TransactionType</strong></p>
                        <p>@transaction.TransactionDate.ToString("yyyy-MM-dd")</p>
                        <p>Amount: @transaction.Amount</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Transaction> transactions = new List<Transaction>();
    private List<Transaction> pendingDebts = new List<Transaction>();
    private decimal totalCashInflows;
    private decimal totalCashOutflows;
    private decimal totalDebts;
    private decimal clearedDebts;
    private decimal remainingDebts;
    private DateTime? startDate;
    private DateTime? endDate;

    protected override async Task OnInitializedAsync()
    {
        transactions = await TransactionService.GetAllTransactionsAsync();
        CalculateStatistics();
        FilterPendingDebts();
    }

    private void ApplyFilters()
    {
        // Filter transactions by date range
        var filteredTransactions = transactions;
        if (startDate.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.TransactionDate >= startDate.Value).ToList();
        }
        if (endDate.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.TransactionDate <= endDate.Value).ToList();
        }

        // Recalculate statistics and debts based on filtered transactions
        transactions = filteredTransactions;
        CalculateStatistics();
        FilterPendingDebts();
    }

    private void CalculateStatistics()
    {
        totalCashInflows = transactions.Where(t => t.TransactionType == "Credit").Sum(t => t.Amount);
        totalCashOutflows = transactions.Where(t => t.TransactionType == "Debit").Sum(t => t.Amount);
        totalDebts = transactions.Where(t => t.TransactionType == "Debt").Sum(t => t.Amount);
        clearedDebts = transactions.Where(t => t.TransactionType == "Debt" && t.Amount == 0).Sum(t => t.Amount);
        remainingDebts = totalDebts - clearedDebts;
    }

    private void FilterPendingDebts()
    {
        pendingDebts = transactions.Where(t => t.TransactionType == "Debt" && t.Amount > 0).ToList();
    }
}
