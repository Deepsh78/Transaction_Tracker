@page "/dashboard"
@using TransactionTracker.Model
@inject ITransactionService TransactionService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IUserService UserService

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f9;
        margin: 0;
        padding: 0;
    }

    .navbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 30px;
        background-color: #ffffff;
        color: #333;
        position: sticky;
        top: 0;
        z-index: 1000;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .navbar .filters {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .navbar label {
            font-size: 14px;
            font-weight: 500;
            color: #555;
        }

        .navbar input {
            padding: 8px 12px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 14px;
        }

        .navbar button {
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

            .navbar button:hover {
                background-color: #c82333;
            }

    .dashboard-container {
        margin: 30px auto;
        max-width: 1200px;
        display: flex;
        flex-direction: column;
        gap: 30px;
    }

    .statistics-box, .transactions-box {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }

    .box {
        flex: 1;
        min-width: 300px;
        padding: 20px;
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .box-header {
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 15px;
        color: #333;
        border-bottom: 2px solid #007bff;
        padding-bottom: 5px;
    }

    .box-content {
        font-size: 16px;
        line-height: 1.6;
        color: #555;
    }

    .transaction-container {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .transaction-card {
        background-color: #f9f9f9;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .transaction-card p {
            margin: 0;
        }

    .text-success {
        color: #28a745;
    }

    .text-danger {
        color: #dc3545;
    }

    .text-warning {
        color: #ffc107;
    }

    canvas {
        margin-top: 20px;
    }
</style>

<div class="navbar">
    <div class="filters">
        <label for="startDate">Start Date:</label>
        <input type="date" id="startDate" @bind="startDate" />

        <label for="endDate">End Date:</label>
        <input type="date" id="endDate" @bind="endDate" />

        <button @onclick="ApplyFilters">Apply Filters</button>
    </div>
    <button @onclick="Logout">Logout</button>
</div>

    <!-- Statistics and Pending Debts -->
    <div class="statistics-box">
        <!-- Statistics Box -->
        <div class="box">
            <div class="box-header">Statistics</div>
            <div class="box-content">
                <p>Total Cash Inflows: <strong>@totalCashInflows</strong></p>
                <p>Total Cash Outflows: <strong>@totalCashOutflows</strong></p>
                <p>Total Debts: <strong>@totalDebts</strong></p>
                <p>Cleared Debts: <strong>@clearedDebts</strong></p>
                <p>Remaining Debts: <strong>@remainingDebts</strong></p>
            </div>
        </div>

        <!-- Pending Debts Box -->
        <div class="box">
            <div class="box-header">Pending Debts</div>
            <div class="transaction-container">
                @if (pendingDebts.Any())
                {
                    @foreach (var debt in pendingDebts)
                    {
                        <div class="transaction-card">
                            <p><strong>Debt: </strong>@debt.Amount</p>
                            <p><strong>Due Date:</strong> @debt.TransactionDate.ToString("yyyy-MM-dd")</p>
                        </div>
                    }
                }
                else
                {
                    <p>No pending debts found.</p>
                }
            </div>
        </div>
    </div>

    <!-- Top Transactions -->
    <div class="transactions-box">
        <!-- Highest Transactions (Bar Chart) -->
        <div class="box">
            <div class="box-header">Top 5 Highest Transactions (Bar Chart)</div>
            <canvas id="highestTransactionsChart"></canvas>
        </div>

        <!-- Lowest Transactions (Pie Chart) -->
        <div class="box">
            <div class="box-header">Top 5 Lowest Transactions (Pie Chart)</div>
            <canvas id="lowestTransactionsChart"></canvas>
        </div>
    </div>



@code {
    private List<Transaction> transactions = new List<Transaction>();
    private List<Transaction> pendingDebts = new List<Transaction>();
    private decimal totalCashInflows;
    private decimal totalCashOutflows;
    private decimal totalDebts;
    private decimal clearedDebts;
    private decimal remainingDebts;
    private DateTime? startDate;
    private DateTime? endDate;

    private string highestTransactionsJson;
    private string lowestTransactionsJson;

    protected override async Task OnInitializedAsync()
    {
        transactions = await TransactionService.GetAllTransactionsAsync();
        CalculateStatistics();
        FilterPendingDebts();

        // Prepare JSON data for charts
        var highestTransactions = transactions.OrderByDescending(t => t.Amount).Take(5).Select(t => new { t.TransactionType, t.Amount });
        var lowestTransactions = transactions.OrderBy(t => t.Amount).Take(5).Select(t => new { t.TransactionType, t.Amount });

        highestTransactionsJson = System.Text.Json.JsonSerializer.Serialize(highestTransactions);
        lowestTransactionsJson = System.Text.Json.JsonSerializer.Serialize(lowestTransactions);

        // Re-render the charts using JS Interop
        JSRuntime.InvokeVoidAsync("renderHighestTransactionsChart", highestTransactionsJson);
        JSRuntime.InvokeVoidAsync("renderLowestTransactionsChart", lowestTransactionsJson);

    }

    private void ApplyFilters()
    {
        // Filter transactions by date range
        var filteredTransactions = transactions;
        if (startDate.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.TransactionDate >= startDate.Value).ToList();
        }
        if (endDate.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.TransactionDate <= endDate.Value).ToList();
        }

        // Recalculate statistics and debts based on filtered transactions
        transactions = filteredTransactions;
        CalculateStatistics();
        FilterPendingDebts();

        // Re-render charts based on the filtered data
        var highestTransactions = transactions.OrderByDescending(t => t.Amount).Take(5).Select(t => new { t.TransactionType, t.Amount });
        var lowestTransactions = transactions.OrderBy(t => t.Amount).Take(5).Select(t => new { t.TransactionType, t.Amount });

        highestTransactionsJson = System.Text.Json.JsonSerializer.Serialize(highestTransactions);
        lowestTransactionsJson = System.Text.Json.JsonSerializer.Serialize(lowestTransactions);

        // Re-render the charts using JS Interop
        JSRuntime.InvokeVoidAsync("renderHighestTransactionsChart", highestTransactionsJson);
        JSRuntime.InvokeVoidAsync("renderLowestTransactionsChart", lowestTransactionsJson);
    }

    private void CalculateStatistics()
    {
        totalCashInflows = transactions.Where(t => t.TransactionType == "Credit").Sum(t => t.Amount);
        totalCashOutflows = transactions.Where(t => t.TransactionType == "Debit").Sum(t => t.Amount);
        totalDebts= transactions.Count(t => t.TransactionType == "Debt");
        clearedDebts = transactions
            .Count(t => t.TransactionType == "Debt" && t.Notes== "Cleared");
        remainingDebts = totalDebts - clearedDebts;
    }

    private void FilterPendingDebts()
    {
        pendingDebts = transactions.Where(t => t.TransactionType == "Debt" && t.Notes!="Cleared").ToList();
    }

    private async Task Logout()
    {
        // Clear user data from local storage (or wherever it's stored)
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "currentUser");

        // Redirect to login page
        Navigation.NavigateTo("/");
    }
}
