@page "/dashboard"
@using TransactionTracker.Model
@inject ITransactionService TransactionService

@* Place CSS directly in the Razor component *@
<style>
    .dashboard-container {
        margin: 30px;
    }

    .dashboard-header {
        text-align: center;
        font-size: 32px;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .card-container {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .dashboard-card {
        width: 23%;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

        .dashboard-card h5 {
            font-size: 18px;
            color: #333;
        }

        .dashboard-card h2 {
            font-size: 36px;
            font-weight: bold;
            color: #000;
        }

    .transaction-container {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .transaction-card {
        background-color: #ffffff;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .transaction-card p {
            margin: 0;
        }

    .text-success {
        color: #28a745;
    }

    .text-danger {
        color: #dc3545;
    }

    .text-warning {
        color: #ffc107;
    }
</style>

<div class="dashboard-container">
    <h1 class="dashboard-header">Transaction Dashboard</h1>

    <!-- Summary Cards -->
    <div class="card-container">
        <div class="dashboard-card bg-success">
            <h5>Total Credit</h5>
            <h2>@totalCredit</h2>
        </div>
        <div class="dashboard-card bg-danger">
            <h5>Total Debit</h5>
            <h2>@totalDebit</h2>
        </div>
        <div class="dashboard-card bg-warning">
            <h5>Total Debt</h5>
            <h2>@totalDebt</h2>
        </div>
        <div class="dashboard-card bg-info">
            <h5>Net Balance</h5>
            <h2>@totalBalance</h2>
        </div>
    </div>

    <!-- Transaction Details -->
    <h3>Transaction Details</h3>
    <div class="transaction-container">
        <div class="transaction-card">
            <p>Highest Transaction</p>
            <h3>@highestTransaction?.Amount</h3>
        </div>
        <div class="transaction-card">
            <p>Lowest Transaction</p>
            <h3>@lowestTransaction?.Amount</h3>
        </div>
        <div class="transaction-card">
            <p>Most Recent Transaction</p>
            <h3>@mostRecentTransaction?.Amount</h3>
        </div>
    </div>

    <!-- List of Transactions -->
    <h3>All Transactions</h3>
    <div class="transaction-container">
        @foreach (var transaction in transactions)
        {
            <div class="transaction-card">
                <div>
                    <p><strong>@transaction.TransactionType</strong></p>
                    <p>@transaction.TransactionDate.ToString("yyyy-MM-dd")</p>
                    <p>Amount: @transaction.Amount</p>
                </div>
                <div>
                    <p class="@(transaction.TransactionType == "Credit" ? "text-success" : transaction.TransactionType == "Debit" ? "text-danger" : "text-warning")">
                        @transaction.TransactionType
                    </p>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<Transaction> transactions = new List<Transaction>();
    private decimal totalCredit;
    private decimal totalDebit;
    private decimal totalDebt;
    private decimal totalBalance;

    private Transaction highestTransaction;
    private Transaction lowestTransaction;
    private Transaction mostRecentTransaction;

    // On Page Load, get all transactions
    protected override async Task OnInitializedAsync()
    {
        transactions = await TransactionService.GetAllTransactionsAsync();
        CalculateTotals();
        FindTransactionStats();
    }

    private void CalculateTotals()
    {
        if (transactions != null)
        {
            totalCredit = transactions
                .Where(t => t.TransactionType == "Credit")
                .Sum(t => t.Amount);

            totalDebit = transactions
                .Where(t => t.TransactionType == "Debit")
                .Sum(t => t.Amount);

            totalDebt = transactions
                .Where(t => t.TransactionType == "Debt")
                .Sum(t => t.Amount);

            // Calculate total balance (inflows + debts - outflows)
            totalBalance = totalCredit + totalDebt - totalDebit;
        }
    }

    private void FindTransactionStats()
    {
        if (transactions != null && transactions.Any())
        {
            // Find the highest transaction by amount
            highestTransaction = transactions.OrderByDescending(t => t.Amount).FirstOrDefault();

            // Find the lowest transaction by amount
            lowestTransaction = transactions.OrderBy(t => t.Amount).FirstOrDefault();

            // Find the most recent transaction
            mostRecentTransaction = transactions.OrderByDescending(t => t.TransactionDate).FirstOrDefault();
        }
    }
}
