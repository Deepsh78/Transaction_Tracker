@page "/weather"
@using TransactionTracker.Model
@inject ITransactionService TransactionService
@inject IDebtService DebtService
@inject NavigationManager NavigationManager

<Layout>
    <div class="transaction-list-container">
        <!-- Header with Clear Debt button -->
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
            <h3>Transaction List</h3>
            @if (hasPendingDebts)
            {
                <button class="btn btn-primary" @onclick="NavigateToDebts">
                    Clear Debt
                </button>
            }
        </div>

        <!-- Filtering Section -->
        <div class="filters">
            <div>
                <label for="transactionType">Transaction Type:</label>
                <select @bind="selectedTransactionType" id="transactionType">
                    <option value="">All Types</option>
                    <option value="Credit">Credit</option>
                    <option value="Debit">Debit</option>
                </select>
            </div>
            <div>
                <label for="startDate">Start Date:</label>
                <input type="date" @bind="startDate" id="startDate" />
            </div>
            <div>
                <label for="endDate">End Date:</label>
                <input type="date" @bind="endDate" id="endDate" />
            </div>
            <button class="btn btn-primary" @onclick="ApplyFilters">Apply Filters</button>
        </div>

        @if (filteredTransactions == null)
        {
            <p>Loading...</p>
        }
        else if (filteredTransactions.Any())
        {
            <div class="transaction-box">
                <table>
                    <thead>
                        <tr>
                            <th>Transaction Type</th>
                            <th>Amount</th>
                            <th>Transaction Date</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in filteredTransactions)
                        {
                            <tr>
                                <td>@transaction.TransactionType</td>
                                <td>@transaction.Amount</td>
                                <td>@transaction.TransactionDate.ToShortDateString()</td>
                                <td>@transaction.Notes</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p>No transactions found.</p>
        }
    </div>
</Layout>

@code {
    private List<Transaction> transactions;
    private List<Transaction> filteredTransactions;
    private string selectedTransactionType;
    private DateTime? startDate;
    private DateTime? endDate;
    private bool hasPendingDebts;

    protected override async Task OnInitializedAsync()
    {
        // Fetch all transactions using the service
        transactions = await TransactionService.GetAllTransactionsAsync();
        filteredTransactions = transactions;

        // Check if there are any pending debts
        var debts = await DebtService.GetPendingDebtsAsync();
        hasPendingDebts = debts.Any();
    }

    private void ApplyFilters()
    {
        // Filter the transactions based on selected criteria
        filteredTransactions = transactions;

        if (!string.IsNullOrEmpty(selectedTransactionType))
        {
            filteredTransactions = filteredTransactions.Where(t => t.TransactionType == selectedTransactionType).ToList();
        }

        if (startDate.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.TransactionDate >= startDate.Value).ToList();
        }

        if (endDate.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.TransactionDate <= endDate.Value).ToList();
        }
    }

    private void NavigateToDebts()
    {
        // Navigate to the Debts page when the button is clicked
        NavigationManager.NavigateTo("/debts");
    }
}

<style>
    .transaction-list-container {
        padding: 20px;
        margin: 10px;
    }

    .filters {
        margin-bottom: 1rem;
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .filters label {
        font-size: 1rem;
    }

    .filters select,
    .filters input {
        padding: 5px;
        font-size: 1rem;
    }

    .transaction-box {
        padding: 15px;
        border: 1px solid #ccc;
        border-radius: 8px;
        background-color: #f9f9f9;
        box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    table th, table td {
        padding: 10px;
        border: 1px solid #ddd;
        text-align: left;
    }

    table th {
        background-color: #f2f2f2;
    }

    button {
        margin-top: 0;
    }
</style>
