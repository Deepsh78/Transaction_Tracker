@page "/"
@using TransactionTracker.Model
@using TransactionTracker.Services
@inject NavigationManager Navigation
@inject IUserService UserService
@implements IDisposable

<PageTitle>Login</PageTitle>

<EditForm Model="@user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h3>Login</h3>

    @if (loginError)
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" name="username" class="form-control" @bind-Value="user.UserName" autocomplete="username" />
        <ValidationMessage For="@(() => user.UserName)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" name="password" class="form-control" @bind-Value="user.Password" autocomplete="current-password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>

    <div class="form-group">
        <label for="currency">Currency</label>
        <InputSelect id="currency" class="form-control custom-select" @bind-Value="user.Currency">
            <option value="" disabled>Select a currency</option>
            <option value="NPR">Nepali Rupees</option>
            <option value="USD">USD</option>
            <option value="INR">Indian Rupees</option>
            <option value="JPY">Yen</option>
        </InputSelect>
        <ValidationMessage For="@(() => user.Currency)" />
    </div>


    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>
<style>
    body {
        font-family: 'Arial', sans-serif;
        background-image: url('/money.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        color: #333;
        margin: 0;
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    form {
        width: 100%;
        max-width: 500px; /* Increased width */
        padding: 30px; /* Slightly increased padding */
        background: rgba(255, 255, 255, 0.9);
        border-radius: 12px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        backdrop-filter: blur(10px);
    }

    h3 {
        text-align: center;
        margin-bottom: 20px;
        font-size: 2em; /* Slightly larger font size */
        color: #007BFF;
    }

    .form-group {
        margin-bottom: 20px;
    }

    label {
        display: block;
        margin-bottom: 8px;
        font-weight: bold;
        color: #333;
    }

    input,
    select {
        width: 100%;
        padding: 12px;
        font-size: 1em;
        border: 1px solid #ccc;
        border-radius: 6px;
        transition: border-color 0.3s ease;
    }

        input:focus,
        select:focus {
            border-color: #007BFF;
            outline: none;
            box-shadow: 0 0 6px rgba(0, 123, 255, 0.4);
        }

    .custom-select {
        appearance: none; /* Remove default dropdown arrow */
        background: #f8f9fa; /* Light gray background */
        padding-right: 40px; /* Space for custom arrow */
        position: relative;
        font-weight: bold;
        color: #333;
    }

        .custom-select::after {
            content: "▼"; /* Custom dropdown arrow */
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            pointer-events: none;
        }

    button {
        width: 100%;
        padding: 12px;
        font-size: 1em;
        font-weight: bold;
        color: #ffffff;
        background-color: #007BFF;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        button:hover {
            background-color: #0056b3;
        }

        button:focus {
            outline: none;
            box-shadow: 0 0 6px rgba(0, 123, 255, 0.4);
        }

    .alert {
        padding: 12px;
        margin-top: 15px;
        font-size: 0.9em;
        border-radius: 6px;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    </style>
@code {
    private Users user = new Users()
        {
            Currency = "" // Default to "Select a currency"
        };
    private bool loginError = false;
    private string errorMessage = null;

    private async Task HandleLogin()
    {
        try
        {
            if (string.IsNullOrEmpty(user.Currency))
            {
                loginError = true;
                errorMessage = "Please select a currency.";
                return;
            }

            var success = await UserService.AuthenticateAsync(user);
            if (success)
            {
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                loginError = true;
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            loginError = true;
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }

    public void Dispose()
    {
        // Cleanup if necessary
    }
}
