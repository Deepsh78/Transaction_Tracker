@page "/"
@using TransactionTracker.Model
@using TransactionTracker.Services
@inject NavigationManager Navigation
@inject IUserService UserService
@implements IDisposable

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<EditForm Model="@user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" name="username" class="form-control" @bind-Value="user.UserName" autocomplete="username" />
        <ValidationMessage For="@(() => user.UserName)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" name="password" class="form-control" @bind-Value="user.Password" autocomplete="current-password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>

    <div class="form-group">
        <label for="currency">Currency</label>
        <InputText id="currency" name="currency" class="form-control" @bind-Value="user.Currency" autocomplete="off" />
        <ValidationMessage For="@(() => user.Currency)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>

</EditForm>

@if (loginError)
{
    <div class="alert alert-danger">Invalid username or password</div>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private Users user = new Users();
    private bool loginError = false;
    private string errorMessage = null;

    private async Task HandleLogin()
    {
        try
        {
            var success = await UserService.AuthenticateAsync(user);
            if (success)
            {
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                loginError = true;
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            // Log the exception and show a friendly message
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }

    public void Dispose()
    {
        // Cleanup if necessary
    }
}
